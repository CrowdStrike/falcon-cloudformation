AWSTemplateFormatVersion: 2010-09-09
Description: Sample template for launching Linux Falcon sensor as an ECS Daemon Service to a cluster
Parameters:
  ECSClusterName:
    Type: String
    Description: Cluster name to deploy Linux Falcon sensor as a Daemon Service
  FalconCID:
    Type: String
    Description: CrowdStrike Customer ID (CID) value
  FalconImagePath:
    Type: String
    Description: The ECR image path including tag value for the Linux Falcon sensor container image

  APD:
    Type: String
    Default: ""
    Description: App Proxy Disable (APD)
  APH:
    Type: String
    Default: ""
    Description: App Proxy Host (APH)
  APP:
    Type: String
    Default: ""
    Description: App Proxy Port (APP)
  Trace:
    Type: String
    Description: Set Trace Level
    Default: none
    AllowedValues:
      - none
      - err
      - warn
      - info
      - debug
  Feature:
    Type: String
    Default: ""
    Description: Sensor Feature Options
  Tags:
    Type: String
    Default: ""
    Description: Comma separated list of tags for sensor grouping
  ProvisioningToken:
    Type: String
    Default: ""
    Description: Provisioning token value
  Billing:
    Type: String
    Default: ""
    Description: Billing value
    AllowedValues:
      - ""
      - default
      - metered
  Backend:
    Type: String
    Default: bpf
    Description: Backend option, allowed values "kernel" and "bpf"
    AllowedValues:
      - bpf
      - kernel

  EnableLogging:
    Type: String
    Description: Boolean string to enable logging for the Falcon ECS service.
    Default: false
    AllowedValues:
      - true
      - false
  EnableExecuteCommand:
    Type: String
    Description: Boolean string to enable ECS exec on the Falcon sensor container. This should be enabled only when required.
    Default: false
    AllowedValues:
      - true
      - false
  ECSExecutionRoleArn:
    Type: String
    Description: Execution role name to exec in to the Falcon container. Only required if ECS exec is enabled.
    Default: ""
  ECSTaskRoleArn:
    Type: String
    Description: Task role name to exec in to the Falcon container. Only required if logging or ECS exec is enabled.
    Default: ""

  EnableResourceLimits:
    Type: String
    Description: >-
      Boolean string to enable setting hard limits for Falcon sensor task CPU and memory resources. Resource limits should only be enabled
      after analyzing and understanding the resource requirements for the Falcon sensor that is running in your ECS environment.
    Default: false
    AllowedValues:
      - true
      - false
  SensorCpuReservation:
    Type: Number
    Description: CPU reservation for the Falcon sensor container. The default is just a placeholder
    Default: 256
  SensorCpuLimit:
    Type: Number
    Description: CPU hard limit for the Falcon sensor task. The cpu limit should be greater than or equal to the cpu reservation.
    Default: 0
  SensorMemoryReservation:
    Type: Number
    Description: Memory reservation for the Falcon sensor container
    Default: 512
  SensorMemoryLimit:
    Type: Number
    Description: Memory hard limit for the Falcon sensor task. The memory limit should be greater than the memory reservation.
    Default: 0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Mandatory Fields
        Parameters:
          - ECSClusterName
          - FalconCID
          - FalconImagePath
      - Label:
          default: Optional falconctl install options
        Parameters:
          - APD
          - APH
          - APP
          - Trace
          - Feature
          - Tags
          - ProvisioningToken
          - Billing
          - Backend
      - Label:
          default: Advanced options for logging
        Parameters:
          - EnableLogging
          - ECSTaskRoleArn
      - Label:
          default: Advanced options for execute-command
        Parameters:
          - EnableExecuteCommand
          - ECSExecutionRoleArn
          - ECSTaskRoleArn
      - Label:
          default: Advanced options for setting resource limits
        Parameters:
          - EnableResourceLimits
          - SensorCpuReservation
          - SensorCpuLimit
          - SensorMemoryReservation
          - SensorMemoryLimit

Conditions:
  IsLoggingEnabled: !Equals [!Ref EnableLogging, "true"]
  IsExecuteCommandEnabled: !Equals [!Ref EnableExecuteCommand, "true"]
  IsExecutionRoleRequired: !Condition IsExecuteCommandEnabled
  IsTaskRoleRequired: !Or
    - !Condition IsLoggingEnabled
    - !Condition IsExecuteCommandEnabled

  IsResourceLimitsEnabled: !Equals [!Ref EnableResourceLimits, "true"]
  SetCpuLimits: !Or
    - !Condition IsResourceLimitsEnabled
    - !Not [!Equals [!Ref SensorCpuLimit, 0]]
  SetMemoryLimits: !Or
    - !Condition IsResourceLimitsEnabled
    - !Not [!Equals [ !Ref SensorMemoryLimit, 0]]

Resources:
  FalconECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: falconstore
          Host:
            SourcePath: /opt/CrowdStrike/falconstore
      NetworkMode: host
      IpcMode: host
      PidMode: host
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !If
        - IsExecutionRoleRequired
        - !Ref ECSExecutionRoleArn
        - !Ref AWS::NoValue
      TaskRoleArn: !If
        - IsTaskRoleRequired
        - !Ref ECSTaskRoleArn
        - !Ref AWS::NoValue
      Cpu: !If
        - SetCpuLimits
        - !Ref SensorCpuLimit
        - !Ref AWS::NoValue
      Memory: !If
        - SetMemoryLimits
        - !Ref SensorMemoryLimit
        - !Ref AWS::NoValue
      ContainerDefinitions:
        - Name: init-falconstore
          MemoryReservation: 128
          Image: !Ref FalconImagePath
          EntryPoint:
            - "/bin/bash"
          Command:
            - '-c'
            - 'echo "Running /opt/CrowdStrike/falcon-daemonset-init -i"; /opt/CrowdStrike/falcon-daemonset-init -i'
          Essential: false
          Privileged: true
          ReadonlyRootFilesystem: false
          User: 0
          LogConfiguration: !If
            - IsLoggingEnabled
            - LogDriver: awslogs
              Options:
                awslogs-group: !Sub "/aws/ecs/${ECSClusterName}/crowdstrike/falcon-daemon-service"
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: "node-init"
            - !Ref AWS::NoValue
        - Name: crowdstrike-falcon-node-sensor
          Image: !Ref FalconImagePath
          Essential: true
          DependsOn:
            - ContainerName: init-falconstore
              Condition: COMPLETE
          Environment:
            - Name: FALCONCTL_OPT_CID
              Value: !Ref FalconCID
            - Name: FALCONCTL_OPT_APD
              Value: !Ref APD
            - Name: FALCONCTL_OPT_APH
              Value: !Ref APH
            - Name: FALCONCTL_OPT_APP
              Value: !Ref APP
            - Name: FALCONCTL_OPT_TRACE
              Value: !Ref Trace
            - Name: FALCONCTL_OPT_TAGS
              Value: !Ref Tags
            - Name: FALCONCTL_OPT_FEATURE
              Value: !Ref Feature
            - Name: FALCONCTL_OPT_PROVISIONING_TOKEN
              Value: !Ref ProvisioningToken
            - Name: FALCONCTL_OPT_BILLING
              Value: !Ref Billing
            - Name: FALCONCTL_OPT_BACKEND
              Value: !Ref Backend
          Cpu: !Ref SensorCpuReservation
          MemoryReservation: !Ref SensorMemoryReservation
          MountPoints:
            - ContainerPath: /opt/CrowdStrike/falconstore
              SourceVolume: falconstore
          Privileged: true
          ReadonlyRootFilesystem: false
          User: 0
          LogConfiguration: !If
            - IsLoggingEnabled
            - LogDriver: awslogs
              Options:
                awslogs-group: !Sub "/aws/ecs/${ECSClusterName}/crowdstrike/falcon-daemon-service"
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: "node-sensor"
            - !Ref AWS::NoValue

  FalconECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSClusterName
      SchedulingStrategy: DAEMON
      LaunchType: EC2
      EnableExecuteCommand: !If [IsExecuteCommandEnabled, true, false]
      ServiceName: crowdstrike-falcon-node-daemon
      TaskDefinition: !Ref FalconECSTaskDefinition

  FalconECSServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsLoggingEnabled
    Properties:
      LogGroupName: !Sub "/aws/ecs/${ECSClusterName}/crowdstrike/falcon-daemon-service"
